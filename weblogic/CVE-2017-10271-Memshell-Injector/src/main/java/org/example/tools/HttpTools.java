package org.example.tools;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.SocketTimeoutException;
import java.net.URL;
import java.security.KeyManagementException;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.SecureRandom;
import java.util.HashMap;
import javax.net.ssl.HostnameVerifier;
import javax.net.ssl.HttpsURLConnection;
import javax.net.ssl.SSLContext;
import javax.net.ssl.TrustManager;

public class HttpTools {

    public static Response get(String url, HashMap<String, String> headers, String encoding) {
        Response response = new Response(0, null, null, null);
        try {
            HttpURLConnection conn = getCoon(url);
            conn.setRequestMethod("GET");
            for (String key : headers.keySet()) {
                conn.setRequestProperty(key, headers.get(key));
            }
            response = getResponse(conn, encoding);
        } catch (SocketTimeoutException var7) {
            response.setError("连接超时!");
        } catch (IOException | NoSuchProviderException | NoSuchAlgorithmException | KeyManagementException ignored) {}
        return response;
    }

    public static void post(String url, String postString, HashMap<String, String> headers, String encoding) {
//        Response response = new Response(0, null, null, null);
        try {
            HttpURLConnection conn = getCoon(url);
            conn.setRequestMethod("POST");
            for (String key : headers.keySet()) {
                conn.setRequestProperty(key, headers.get(key));
            }
            OutputStream outputStream = conn.getOutputStream();
            outputStream.write(postString.getBytes());
            outputStream.flush();
            outputStream.close();
            getResponse(conn, encoding);
        } catch (Exception ignored) {}
//        return response;
    }

    private static Response getResponse(HttpURLConnection conn, String encoding) {
        Response response = new Response(0, null, null, null);
        try {
            conn.connect();
            response.setCode(conn.getResponseCode());
            response.setHead(conn.getHeaderFields().toString());
            response.setText(streamToString(conn.getInputStream(), encoding));
        } catch (IOException ignored) {}
        return response;
    }

    private static HttpURLConnection getCoon(String url) throws IOException, NoSuchProviderException, NoSuchAlgorithmException, KeyManagementException {
        SSLContext sslcontext = SSLContext.getInstance("SSL", "SunJSSE");
        TrustManager[] tm = new TrustManager[]{new Cert()};
        sslcontext.init(null, tm, new SecureRandom());
        HostnameVerifier ignoreHostnameVerifier = (s, sslsession) -> true;
        HttpsURLConnection.setDefaultHostnameVerifier(ignoreHostnameVerifier);
        HttpsURLConnection.setDefaultSSLSocketFactory(sslcontext.getSocketFactory());
        URL url_object = new URL(url);
        HttpURLConnection conn = (HttpURLConnection)url_object.openConnection();
        String UA = "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 Safari/537.36";
        conn.setRequestProperty("User-Agent", UA);
        conn.setRequestProperty("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9");
        conn.setRequestProperty("Accept-Language", "zh-CN,zh;q=0.9");
        conn.setRequestProperty("Connection", "close");
        conn.setConnectTimeout(5000);
        conn.setReadTimeout(5000);
        conn.setDoOutput(true);
        conn.setDoInput(true);
        conn.setUseCaches(false);
        conn.setInstanceFollowRedirects(false);
        return conn;
    }

    private static String streamToString(InputStream inputStream, String encoding) {
        String resultString = null;
        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
        byte[] data = new byte[1024];
        try {
            int len;
            while((len = inputStream.read(data)) != -1) {
                byteArrayOutputStream.write(data, 0, len);
            }
            if (encoding.isEmpty()) {
                encoding = "UTF-8";
            }
            resultString = byteArrayOutputStream.toString(encoding);
        } catch (IOException ignored) {}
        return resultString;
    }
}